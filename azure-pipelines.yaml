name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab.
# Otherwise, comment out the line below.
pool:
  name: Default

variables:
  python.version: '3.8.10'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test-vm'
  # terraform storage number
  tfstatenumber: 'tfstate800418379'
  # terraform resource group
  tfrg: 'Azuredevops'
  # webapp name
  application_type: 'my-application'

stages:
#--------------------------------------------#
# BUILD STAGE
#--------------------------------------------#
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    # --------------------------------------------#
    # Use Terraform to create the Infrastructure
    # Install Terraform on the pipeline agent
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terraform installation'
      inputs:
        terraformVersion: '1.2.9'
      enabled: false

    # Run Terraform Init on the pipeline agent
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(projectRoot)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(tfrg)'
        backendAzureRmStorageAccountName: '$(tfstatenumber)'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
      enabled: false

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
      enabled: false

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it.
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module.
    # Install public key and private key file to the pipeline agent, using the task below.
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file

    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName:
    #  inputs:
    #   secureFile:

    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(projectRoot)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
      enabled: false
    #--------------------------------------------#

    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(projectRoot)/automatedtesting/jmeter/'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'

    # JMeter Test Suite - Publish
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

    # Selenium (UI) Test Suite - Archive the package
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(projectRoot)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above.
      displayName: 'Upload Package'
      artifact: drop-uitests
      enabled: false

    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(projectRoot)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

#--------------------------------------------#
# DEPLOYMENT STAGE
#--------------------------------------------#
- stage: Deploy
  jobs:
  # --------------------------------------------#
  # Deploy FakeRestAPI Web App
  - deployment: DeployApi
    pool: Default
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appName: 'my-application-AppService'
              appType: 'webAppLinux'
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

# --------------------------------------------#
# TEST STAGE
# --------------------------------------------#
- stage: Test
  jobs:
  - job: TestAPI
    steps:
    # --------------------------------------------#
    # Postman - Install Newman
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: |
          sudo apt-get -y install npm
          sudo npm cache clean -f
          sudo npm install -g n
          sudo n stable
          sudo npm install -g newman
        workingDirectory: $(projectRoot)
    # Postman Data Validation Test Suite
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(projectRoot)/automatedtesting/postman'
    # Postman Regression Test Suite
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(projectRoot)/automatedtesting/postman'
    # Postman - Publish Results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: 'automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: 'Publish test results'

    #--------------------------------------------#
    # Jmeter - Performance Test Suite
  - job: TestJMeter
    displayName: Test JMeter
    pool: Default
    steps:
    - bash: |
        sudo apt-get install openjdk-11-jre-headless -y
        java -version
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
        tar xzvf jmeter.tgz
        mkdir -p log/jmeter
      displayName: Install JMeter
    - bash: |
        apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/stress-test.jmx \
                                    -l log/jmeter/stress-test-result.csv \
                                    -e -f -o log/jmeter/stress-test-html-report \
                                    -j log/jmeter/jmeter-stress-test.log
      displayName: JMeter Stress Test
    - bash: |
        apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/endurance-test.jmx \
                                    -l log/jmeter/endurance-test-result.csv \
                                    -e -f -o log/jmeter/endurance-test-html-report \
                                    -j log/jmeter/jmeter-endurance-test.log
      displayName: JMeter Endurance Test
    - task: ArchiveFiles@2
      displayName: Save JMeter Stress Test Report to Artifact
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - task: ArchiveFiles@2
      displayName: Save JMeter Endurance Test Report to Artifact
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: Publish JMeter Logs
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
        artifactName: 'drop-jmeter-logs'

  #--------------------------------------------#
  # Selenium | Functional UI Tests
  # ToDo:
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: $(environmentName)
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: Selenium installs
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash

                sudo apt-get update -y
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                sudo apt-get install software-properties-common
                sudo apt-get install -y python-selenium
                pip3 install selenium
          - task: Bash@3
            displayName: Selenium Tests
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash

                cd $(Pipeline.Workspace)/drop-uitests
                unzip -o $(Build.BuildId)-uitests.zip

                rm -rf /var/log/selenium
                sudo mkdir -p /var/log/selenium
                sudo chmod 777 /var/log/selenium

                python3 -u add_remove_from_cart.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log

                cd $(System.DefaultWorkingDirectory)

                rm -rf log/selenium
                mkdir -p log/selenium

                sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium Logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
              artifactName: 'drop-selenium-logs'

